package minesweeper;
import java.awt.Color;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class MayinTarlasi extends javax.swing.JFrame implements ActionListener,MouseListener{
    private byte satir;
    private byte sutun;
    private short mayinSayi;
    String mayinStringi;
    private short kalanMayinGoster;
    final byte MAYINLISAYI = 10;
    ImageIcon flag = new ImageIcon("image\\flag.jpg");
    JButton smile = new JButton("");
    ImageIcon ic = new ImageIcon("image\\mayin.jpg");
    ImageIcon gri = new ImageIcon("image\\gri.png");
    ImageIcon ic1 = new ImageIcon("image\\smile.jpg");
    ImageIcon m = new ImageIcon("image\\m.jpg");
    JLabel flagLabel = new JLabel();
    Container cn = new Container();
        byte[][] miktar;//etraf mayınları verir
        byte[][] resimkontrol;//bayrak kontrolde kullanılır
    JButton[][] butonlar;
    String[] parcala;//tarih

    public MayinTarlasi(byte satir, byte sutun, short mayin)
{    mayinStringi = mayin+"";
        Date trh = new Date();//zaman hesabında kullanılmıstır
        String a = trh.toString();
        a=a.substring(11,19);
        parcala=a.split(":");
        flagLabel.setBounds(0,0,20,20);
        flagLabel.setIcon(new ImageIcon(flag.getImage()));
        this.satir = satir;
        this.sutun = sutun;
        mayinSayi = mayin;
        kalanMayinGoster = mayinSayi;
        initComponents();
        jLabel1.setText(mayinStringi);
        butonlar = new JButton[satir][sutun];//buton miktarı
        miktar = new byte[satir][sutun];
        resimkontrol = new byte[satir][sutun];
        smile.setSize(50,50);
        smile.setIcon(new ImageIcon(ic1.getImage()));
        smile.addActionListener(this);
        jPanel3.add(smile);
        jPanel2.setLayout( new BorderLayout());
        cn.setLayout(new GridLayout(satir,sutun));//sınır cizer20ye 20
        setIconImage(ic.getImage());
             for(byte i= 0; i<butonlar.length; i++){   
                 for(byte j=0; j<butonlar[0].length;j++){
              butonlar[i][j]= new JButton();
              butonlar[i][j].addMouseListener(this);
              butonlar[i][j].addActionListener(this);//tum butonlara action ekledi
              cn.add(butonlar[i][j]);//butonları konteynıra ekledi
              }}
        jPanel2.add(cn,BorderLayout.CENTER);//butonlar 2 panel merkeze
        rastMayinOlustur();
        setVisible(true);
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mayın tarlası");
        setLocation(new java.awt.Point(266, 114));

        jButton1.setText("Güzel zamanlar");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(475, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 738, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
           new GuzelZamanlar("kayit","kayit.txt");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MayinTarlasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MayinTarlasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MayinTarlasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MayinTarlasi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    public void rastMayinOlustur()
{        ArrayList<Integer> liste = new ArrayList<Integer>();
      
        for (byte i = 0; i < miktar.length; i++){ 
        for (byte j = 0; j < miktar[0].length; j++){ liste.add(i*100+j);}} 

        miktar = new byte[satir][sutun];//miktarı sıfırla
        
        for (short i = 0; i < mayinSayi; i++)//mayin ata
        {
            short sec = (short)(Math.random()*liste.size());
            miktar[liste.get(sec) / 100][liste.get(sec) % 100]=MAYINLISAYI;//mayinli butonda 10 yazcak
             liste.remove(sec);
        }
        for (byte i = 0; i < miktar.length; i++) {
            for (byte j = 0; j < miktar[0].length; j++) {
                if(miktar[i][j]!=MAYINLISAYI){//mayınlı sayı değilse etraftaki mayınları kontrol eder
                byte komsuMiktar=0;
                
                 if(i>0 && j>0 && miktar[i-1][j-1]==MAYINLISAYI)//ust sol
                {komsuMiktar++;}
                 
                if(j>0 && miktar[i][j-1]==MAYINLISAYI)//sol
                {komsuMiktar++;}
                
                if(i<miktar.length-1 && j>0 && miktar[i+1][j-1]==MAYINLISAYI)//alt sol
                {komsuMiktar++;}
                
                if(i>0 && miktar[i-1][j]==MAYINLISAYI)//ust
                {komsuMiktar++;}
                
                if(i<miktar.length-1 && miktar[i+1][j]==MAYINLISAYI)//alt
                {komsuMiktar++;}
              
                if(i>0 && j<miktar[0].length-1 && miktar[i-1][j+1]==MAYINLISAYI) //ust sag
                   {komsuMiktar++;}

                if(j<miktar[0].length-1 && miktar[i][j+1]==MAYINLISAYI)//sag
                   {komsuMiktar++;}

                if(i<miktar.length-1 && j<miktar[0].length-1 && miktar[i+1][j+1]==MAYINLISAYI)//alt sag
                 {komsuMiktar++;}

                     miktar[i][j]=komsuMiktar;
                                       } 
                 }}       
}
        public void kaybet()
{
        for (byte i = 0; i < butonlar.length; i++) {
            for (byte j = 0; j < butonlar[0].length; j++) {
                if(butonlar[i][j].isEnabled()){
                if(miktar[i][j]!=MAYINLISAYI){renklendirHayati(i, j);}
                else{
                 butonlar[i][j].setIcon(new ImageIcon(m.getImage()));
                 butonlar[i][j].setText("");
                 butonlar[i][j].setEnabled(false);
                    }
                }
            }}
}
      public void sifirTemizle(ArrayList<Integer> temizle) 
{
    if(temizle.size() == 0){return;}//ozyinelemeli yazılmıstır
    else
    {
    int x = temizle.get(0)/100;//temizlenecek elemanın koordinatlarını verir
    int y = temizle.get(0)%100;
    temizle.remove(0);
    if(miktar[x][y] == 0)//etrafta sıfır var mı kontrol eder varsa temizleye ekler
    {
        if(x>0 && y>0 && butonlar[x-1][y-1].isEnabled()==true)//ust sol                 
        {  renklendirHayati((byte)(x-1),(byte)(y-1));
        if(miktar[x-1][y-1]==0){temizle.add((x-1)*100+y-1);}
        }
        
        if(x>0 && butonlar[x-1][y].isEnabled()==true )//ust                             
        { renklendirHayati((byte)(x-1),(byte)(y));
        if(miktar[x-1][y]==0){temizle.add((x-1)*100+y);}
        }
        
        if(y<miktar[0].length-1 && x>0 && butonlar[x-1][y+1].isEnabled()==true)//ust sag                  
        { renklendirHayati((byte)(x-1),(byte)(y+1));
        if(miktar[x-1][y+1]==0){temizle.add((x-1)*100+y+1);}
        }
        
        if(y>0 && butonlar[x][y-1].isEnabled()==true)// sol                       
        { renklendirHayati((byte)(x),(byte)(y-1));
        if(miktar[x][y-1]==0){temizle.add(x*100+(y-1));}
        }
   
        if(y<miktar[0].length-1 && butonlar[x][y+1].isEnabled()==true)// sag            
        { renklendirHayati((byte)(x),(byte)(y+1));
        if(miktar[x][y+1]==0){temizle.add((x*100)+y+1);}
        }
        
        if(y>0 && x<miktar.length-1 && butonlar[x+1][y-1].isEnabled()==true)//alt sol    
        {  renklendirHayati((byte)(x+1),(byte)(y-1));
        if(miktar[x+1][y-1]==0){temizle.add((x+1)*100+y-1);}
        }
        
        if(x<miktar.length-1 && butonlar[x+1][y].isEnabled()==true)//alt               
        { renklendirHayati((byte)(x+1),(byte)(y));
        if(miktar[x+1][y]==0){temizle.add((x+1)*100+y);}
        }
        
        if(x<miktar.length-1 && y<miktar[0].length-1 && butonlar[x+1][y+1].isEnabled()==true)//alt sag   
        { renklendirHayati((byte)(x+1),(byte)(y+1));
        if(miktar[x+1][y+1]==0){temizle.add((x+1)*100+y+1);}
        }
      }
    sifirTemizle(temizle);
    }         }
        
    public void kontrolKazan()
{
    boolean kazan = true;
        for (byte i = 0; i < butonlar.length; i++) {
            for (byte j = 0; j < butonlar[0].length; j++) {
                if(miktar[i][j] != MAYINLISAYI && butonlar[i][j].isEnabled()  == true)
                {
                kazan = false;
                }
            }}
    if(kazan == true)
    {//sistem tarihinden yararlanılıp kazandığında geçen süre hesaplanmıştır
        Date trh1 = new Date();
        String a = trh1.toString();
        String[] parcala1;
        a=a.substring(11,19);
        parcala1=a.split(":");
        
         byte sonsaat=Byte.parseByte(parcala1[0]);
         byte sondakika=Byte.parseByte(parcala1[1]);
         byte sonsaniye=Byte.parseByte(parcala1[2]);

         byte ilksaat=Byte.parseByte(parcala[0]);
         byte ilkdakika=Byte.parseByte(parcala[1]);
         byte ilksaniye=Byte.parseByte(parcala[2]);
        
         byte saat=0,dakika=0,saniye=0;
         
         if(ilksaniye>=sonsaniye)//saniye hesabı
         {saniye = (byte) ((sonsaniye-ilksaniye)+60);
         if(saniye == 60){saniye=0;}
         dakika++;
         }else{saniye=(byte) (sonsaniye-ilksaniye);}
         
          if(ilkdakika>=sondakika)//dakika hesabı
         {dakika = (byte) ((sondakika-ilkdakika)+60);
         if(dakika == 60){dakika=0;}
         saat++;
         }else{dakika=(byte) (sondakika-ilkdakika);}
          
         saat=(byte) (sonsaat-ilksaat);//saat hesabı
         
        String isim = JOptionPane.showInputDialog(rootPane, "İsmini yazmak ister misin?", "KAZANDIN", HEIGHT);
         if(isim.equals("")){isim=" ";}
        String zaman = saat+" saat, "+dakika+" dakika, "+saniye+" saniye.";
        String ekle = "\n"+satir+";"+sutun+";"+mayinSayi+";"+zaman+";"+isim;//kazanınca bu verileri txt dosyasına kaydeder
        File fl = new File("kayit","kayit.txt");
        try{
        FileOutputStream fos =new FileOutputStream(fl,true);
        fos.write(ekle.getBytes());
        fos.flush();
        fos.close();
        }catch(Exception e){
        e.printStackTrace();
        }
        
         for (byte i = 0; i < butonlar.length; i++) {
            for (byte j = 0; j < butonlar[0].length; j++) {
        butonlar[i][j].setEnabled(false);//kazandıktan sonra mayına basmasın diye
            }}
    }
}
    
    public void renklendirHayati(byte i, byte j)//buton numarasına gore renk katar
    {   
        butonlar[i][j].setText(miktar[i][j]+ "");
        switch(miktar[i][j])
        {
            case 1:  butonlar[i][j].setBackground(Color.CYAN);      break;
            case 2:  butonlar[i][j].setBackground(Color.PINK);      break;
            case 3:  butonlar[i][j].setBackground(Color.orange);    break;
            case 4:  butonlar[i][j].setBackground(Color.GREEN);     break;
            case 5:  butonlar[i][j].setBackground(Color.BLUE);      break;
            case 6:  butonlar[i][j].setBackground(Color.YELLOW);    break;
            case 7:  butonlar[i][j].setBackground(Color.MAGENTA);   break;
            case 8:  butonlar[i][j].setBackground(Color.DARK_GRAY); break;
            default: butonlar[i][j].setBackground(Color.WHITE);     break;
        }
         
        butonlar[i][j].setEnabled(false);
}
    @Override
    public void actionPerformed(ActionEvent e) {
      if(e.getSource().equals(smile))// yeni oyn icin
      {new HaritaDuzenle(); dispose();}
      else
      { 
          for (byte i = 0; i < butonlar.length; i++) {
              for (byte j = 0; j < butonlar[0].length; j++) {
                  if(e.getSource().equals(butonlar[i][j]))
                  {   
                      if(miktar[i][j] == MAYINLISAYI)
                      {
                       kaybet(); 
                       JOptionPane.showMessageDialog(null,"Oyun Bitti");
                         
                      }
                      else if(miktar[i][j]==0)
                      {  renklendirHayati(i, j);
                         ArrayList<Integer> temizle = new ArrayList<Integer>();
                         temizle.add(i*100+j);
                         sifirTemizle(temizle);
                         kontrolKazan();
                      }
                      else
                      {
                        renklendirHayati(i, j);
                        kontrolKazan();
                      }
                   }
              }}
      }
}

    @Override
    public void mouseClicked(MouseEvent e) //bayrak koymaya yarar ve koyulan resimi silemediğimden %2 tıklamalarda gri bir resim ekler
    {
               if(e.getButton() == MouseEvent.BUTTON3)//sağ tuşa basmışsa
            {
          for  (byte i = 0; i < butonlar.length; i++) {
              for (byte j = 0; j < butonlar[0].length; j++){
                 
                  if(butonlar[i][j].isEnabled())
                                               {
                  if(e.getSource().equals(butonlar[i][j]))
                            {
                      resimkontrol[i][j] += 1;
                      if(resimkontrol[i][j]%2 == 0)//bayrak kaldır
                      {
                      butonlar[i][j].setIcon(new ImageIcon(gri.getImage())); 
                        kalanMayinGoster++;
                      }
                      else //sag tus ve bayrak ekle
                      {
                          butonlar[i][j].setIcon(new ImageIcon(flag.getImage())); 
                          kalanMayinGoster--;
                       if(kalanMayinGoster<0)
                       {
                       JOptionPane.showMessageDialog(rootPane,"Kalan mayın sayısı negatif olamaz.","Hata", HEIGHT);
                          butonlar[i][j].setIcon(new ImageIcon(gri.getImage())); 
                                                  kalanMayinGoster++;
                          mayinStringi = kalanMayinGoster+"";
                          jLabel1.setText(mayinStringi);
                       }
                      }
                         mayinStringi = kalanMayinGoster+"";
                          jLabel1.setText(mayinStringi);
                            }
                                                }
                }}
            }
   }
    @Override
    public void mousePressed(MouseEvent e) {}
    @Override
    public void mouseReleased(MouseEvent e) {}            
    @Override
    public void mouseEntered(MouseEvent e) { //bayrak ekledikten sonra sıfır temizle ile buton acılır ve bayraklı kalıyordu  sorunu duzellti
      for  (byte i = 0; i < butonlar.length; i++) {
              for (byte j = 0; j < butonlar[0].length; j++){
                 if(e.getSource().equals(butonlar[i][j])){
    if(!butonlar[i][j].isEnabled() && resimkontrol[i][j]%2 !=0){
                    resimkontrol[i][j]++;
                    butonlar[i][j].setIcon(new ImageIcon(gri.getImage())); 
                    kalanMayinGoster++;
                    mayinStringi = kalanMayinGoster+"";
                    jLabel1.setText(mayinStringi);
                                                            }
                                                         }  
                                                            }}
     
    }
    @Override
    public void mouseExited(MouseEvent e) {}
}